# hello_world.mpc
from Compiler.library import *
from Compiler.compilerLib import Compiler
from Compiler.types import *
from Compiler.oram import *
from Programs.Source.HNSW.HeapQ import MinHeapQ,MaxHeapQ
import time
from Compiler.mpc_math import *
# compiler = Compiler()

# @compiler.register_function('helloworld')
# def hello_world():
#     print_ln('hello world')

# if __name__ == "__main__":
#     compiler.compile_func()
# print_ln('-'*50+'RESULT'+'-'*50)
# a = sint.Array(100000)
# a.input_from(0)

# a.sort()
# a_revealed = a.reveal_to(0)
# print_ln_to(0,'output is : %s',1)


# x = sint(10)
# @for_range(10000)
# def _(i):
#     x.update(i)
# print_ln_to(0, 'x = %s', x.reveal_to(0))

# @function
# def f(x, y, z):
#     y.write(1)
#     z[0] = 2
#     return x + 3

# a = MemValue(sint(0))
# b = sint.Array(10)
# c = f(sint(4), a, b)
# a.write(10)
# @for_range(a.reveal())
# def _(i):
#     b[i] = i
# print_ln('a = %s b[0] = %s c = %s', a.reveal(), b[0].reveal(), c.reveal())
# print_ln('-'*106)
# y = sint.get_input_from(2).reveal()
# print_ln('%s', y)
# @for_range(y)
# def _(i):
#     print_ln('%s', i)
# x = sint.Tensor([100,2])
# x.input_from(1)
# a = OptimalORAM(size = 100, value_length = 2)
# ve = x.get_vector()
# print_ln('%s', len(ve))
# a.access()
# print_ln('%s', type(a))

# MMAX0 = 12
# EP = sint.get_input_from(2).reveal()
# L = sint.get_input_from(2).reveal()
# NodeCnt = sint.get_input_from(2).reveal()
# print_ln("完成读取 EP, L, NodeCnt ...")

# print_ln("开始读取 edge ...")
# tmp = sint.Array(4)
# edge = OptimalORAM(size = 100, value_length = 4)
# @for_range_opt(100)
# def _(i):
#     tmp.input_from(2)
#     edge[i] = [*(tmp.get_vector())]
#     print_ln('%s',[edge[i][_].reveal() for _ in range(4)])
# print_ln("完成读取 edge ...")

# W = [MemValue(1)]
# L = cint(1)
# @for_range_opt(L,0,-1)
# def _(i):
#     # nonlocal W
#     # W = [W[0] + 1]
#     W[0].write(W[0]+2)
#     print_ln('%s', W[0])
#     print_ln('%s', i)


# N = 100
# # C = LinearORAM(size = N, value_length = 2)
# C = sint.Tensor([N, 2])
# print_ln('%s',C.sizes[0])
# @for_range_opt(N)
# def _(i):
#     C[i] = (i,i)
# start_timer(timer_id=11)
# mx = MemValue(sint(0))
# @for_range_opt(10)
# def _(i):
#     tmp = C[i][0]
#     print_ln('tmp = %s\n', tmp.reveal())
#     mx.write( (mx>tmp).if_else(mx,tmp) ) 
# print_ln('mx = %s\n', mx.reveal())
# stop_timer(timer_id=11)

# start_timer(22)
# M = 100000
# D = sint.Tensor([M,2])
# @for_range_opt(M)
# def _(i):
#     D[i] = (N-i,i)
# D.sort()
# print_ln('D mx = %s\n', D[M-1].reveal())

# stop_timer(22)
# start_timer(timer_id=11)
# x = OptimalORAM(100)
# @for_range_opt(100)
# def _(i):
#     x[i] = i
# stop_timer(timer_id=11)

# a = sint.Tensor([10,2])


# N = 1000
# v = sint.Array(N)
# v.assign_all(0)
# M = 100
# a = sint.Array(M)
# @for_range_opt(M)
# def _(i):
#     a[i] = random.randint(-3,3)
# print_ln('%s', a.reveal())
# ed = MemValue(regint(0))
# @for_range_opt(M)
# def _(i):
#     flag = MemValue(sint(0))
#     ed = i
#     @for_range_opt(ed)
#     def _(j):
#         print_ln('j = %s', j)
#         # flag.write(flag + (v[j] == a[i]))
#     v[i] = flag.if_else(0, a[i])
#     print_ln('v[%s] = %s', i, v[i].reveal())
#     print_ln('a[%s] inserted = %s', i, flag.reveal())

# def secure_array_contains(target_array, element_to_find):
#     """
#     安全、高效地判断一个 sint 元素是否存在于 sint.Array 中。

#     :param target_array: sint.Array, 在其中进行搜索的数组
#     :param element_to_find: sint, 要查找的元素
#     :return: sbool (sint), 如果存在则为1，否则为0
#     """
#     print_ln("执行安全存在性检查...")
    
#     # 第1步: 广播要查找的元素
#     broadcasted_element = sint.Array(size=target_array.length)
#     broadcasted_element.assign_all(element_to_find)
#     # 第2步: 向量化比较
#     match_vector = (target_array == broadcasted_element)
    
#     # 第3步: 求和归约
#     num_matches = match_vector.sum()
    
#     # 第4步: 判断总和是否大于0
#     result = num_matches > 0
    
#     return result

# # --- 测试 ---
# # 创建一个测试数组
# N = 10
# my_array = sint.Array(N)
# @for_range(N)
# def _(i):
#     my_array[i] = i * 5 # 数组内容: [0, 5, 10, 15, ..., 45]

# my_arr = my_array.get_sub(0,5)
# print_ln('%s %s', type(my_arr), len(my_arr))
# res = my_array.concat(my_arr)
# print_ln('%s', res.reveal())

# # 测试一个存在的元素
# x1 = sint(20)
# is_present1 = secure_array_contains(my_array, x1)
# print_ln("数字 %s 是否在数组中? %s (1=是, 0=否)", x1.reveal(), is_present1.reveal())

# # 测试一个不存在的元素
# x2 = sint(22)
# is_present2 = secure_array_contains(my_array, x2)
# print_ln("数字 %s 是否在数组中? %s (1=是, 0=否)", x2.reveal(), is_present2.reveal())

# c = MemValue(regint(1))
# c.iadd(2)
# print_ln('c = %s', c)

# a = MemValue(regint(2))
# b = a.read()
# a.iadd(1)
# print_ln('%s %s', a, b)

# a = sint.Tensor([10,4])
# for i in range(10):
#     a[i] = [random.randint(1,10) for _ in range(4)]
#     # print_ln('%s', type(a[i]))
#     print_ln('%s', a[i].reveal())
# b = sint.Tensor([10,4])
# for i in range(10):
#     b[i] = [random.randint(1,10) for _ in range(4)]
#     # print_ln('%s', type(b[i]))
#     print_ln('%s', b[i].reveal())

# @for_range_opt(1000)
# def _(_):
#     delta = a[1] - b[1]
#     res = delta * delta
#     res = res.sum()
#     # '''上面更快'''
#     # delta = Array.create_from(a[1] - b[1])
#     # res = delta.dot(delta)
#     print_ln('type delta = %s', type(delta))
#     print_ln('delta = %s', delta.reveal())
#     print_ln('delta^2 %s', res.reveal())

# a = sint.Tensor([1000,2])
# @for_range_opt(1000)
# def _(i):
#     a[i] = [random.randint(1,3) for _ in range(2)]
#     # print_ln('%s', type(a[i]))
#     # print_ln('%s', a[i].reveal())
# start_timer(111)
# min_dist = MemValue(sint(1000000)) 
# min_node_idx = MemValue(sint(0))
# @for_range_opt(a.sizes[0])
# def _(i):
#     # curr = a[i][0]
#     # is_equal = curr == 2
#     # a[i][0] = is_equal.if_else(100, curr)
#     current_dist = a[i][0]
#     current_node_idx = a[i][1]
    
#     # 安全地比较当前最小值和当前元素
#     is_smaller = current_dist < min_dist
    
#     # 使用 if_else 安全地更新最小值
#     min_dist.write(is_smaller.if_else(current_dist, min_dist))
#     min_node_idx.write(is_smaller.if_else(current_node_idx, min_node_idx))
#     # print_ln('%s', a[i].reveal())
# stop_timer(111)

# start_timer(222)
# a.sort()

# stop_timer(222)

# L = cint(10)
# x = MemValue(L)
# @for_range_opt(L,1,-1)
# def _(i):
#     print_ln('%s', i)
#     x.write(i)
# print_ln('%s', x)

# x = regint(10)
# y = regint(3)
# print_ln('%s', x/y)
# a = sint.Tensor([100,5])
# b = []
# for i in range(100):
#     b.append([random.randint(1,3) for _ in range(5)])
#     a[i] = b[-1]
#     print_ln('%s', type(a[i]))
#     print_ln('%s', a[i].reveal())
#     x = a[i][:2]
#     print_ln('%s', type(x))
#     print_ln('%s', x.reveal())

# z = ' '.join(str(b[_][0]) for _ in range(3))
# z = ' '.join(['2','4','5'])
# print_ln('%s', len(z))
# print_ln('%s', z)
# print_ln('%s', type(a[1]))
# print_ln('%s', type(a[2]))
# print_ln('%s', type(a[1]-a[2]))

# def ssss(id, a, b):
#     print_ln('%s', type(a))
#     print_ln('%s', type(b))
#     # print_ln('%s', type(a - b))
# @for_range_opt(1,3)
# def _(i):
#     ssss(i, a[i][0:i], a[i+1][0:i])

a = sint.Tensor([10000, 12])
a[0][1] = 1
a[1][1] = 2
x = OptimalORAM(10000, value_length = 12)
start_timer(11)
x.batch_init(a)
stop_timer(11)
start_timer(12)
@for_range_opt(50)
def _(i):
    y = x[i]
    print_ln('type of y : %s', type(y))
    print_ln('%s', x[i][1].reveal())
stop_timer(12)