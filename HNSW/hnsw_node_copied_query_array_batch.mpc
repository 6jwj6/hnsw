from Compiler.library import *
from Compiler.types import *
from Compiler.oram import *
from Compiler.mpc_math import *
# --- 全局常量和变量 ---
Inf = 100000000
MINX = -100
MAXX = 100
D = 4  # 向量维度
M = 6  # 每个节点的最大连接数 (除第0层外)
MMAX0 = 2 * M  # 第0层的最大连接数
MMAX = M
N = 10000 # 数据点数量
EF_CONSTRUCTION = 10  # 构建索引时的搜索范围大小 构建时用了 10
'''似乎在搜索中把这个数稍微调小一点不影响召回率，但是对时间影响不大'''
K = 1 # K-NN搜索中的K值
MaxNodeCnt = (int)(N*M/(M-1) + 6*math.sqrt(N*M)/(M-1))+5 # 总点数期望值

# 数据和图结构
node_brt = sint.Tensor([N + 1, D]) # 暴力算法用的原始数据库
node = sint.Tensor([MaxNodeCnt, D]) # hnsw算法用的有复制的数据库
querynode = None
nodeedge = sint.Tensor([MaxNodeCnt, MMAX0, D]) # 相邻点对应的d维数据
edge = sint.Tensor([MaxNodeCnt, MMAX0]) # 相邻点的id
ite = sint.Array(MaxNodeCnt)

# HNSW 算法状态
L = None  # 当前最高层数
EP = None # 入口点 (entry point) 的索引
NodeCnt = cint(0)
ML = 1 / math.log(M)

nq = 2

def distance_query_to_node(q_idx, node_idx):
    """计算一个查询点和一个主数据集节点之间的距离"""
    vec1 = querynode[q_idx]
    vec2 = node[node_idx]
    delta = vec1 - vec2
    res = (delta * delta).sum()
    return res

def secure_array_contains(target_array, element_to_find):
    """
    安全、高效地判断一个 sint 元素是否存在于 sint.Array 中。
    :param target_array: sint.Array, 在其中进行搜索的数组
    :param element_to_find: sint, 要查找的元素
    :return: sbool (sint), 如果存在则为1，否则为0
    """
    broadcasted_element = sint.Array(size = target_array.length)
    broadcasted_element.assign_all(element_to_find)
    # 向量化比较
    match_vector = (target_array == broadcasted_element)
    # match_vector = (target_array == element_to_find)
    num_matches = match_vector.sum()
    result = num_matches > 0
    return result

def secure_unique(target_array:Array):
    target_array.sort()
    le = len(target_array)
    rshifted = sint.Array(1)
    rshifted = rshifted.concat(target_array.get_sub(0, le-1))
    match_vec = target_array == rshifted
    target_array.assign(target_array + match_vec * Inf)
    target_array.sort()
    return target_array

def distance_query_to_nodeedge(q_idx, c_node_idx, index):
    vec1 = querynode[q_idx]
    vec2 = nodeedge[c_node_idx][index]
    delta = vec1 - vec2
    res = (delta * delta).sum()
    return res

def search_layer_for_query(q_indexes:Array, ep, ef, lc, maxloop, batch_size = 1):
    print_ln('batch_size = %s', batch_size)
    MD = Inf
    # MC = (ef + MMAX0) * 10 # batch_size
    # MC = ef * batch_size + MMAX0
    MC = maxloop * MMAX0 * batch_size
    C = sint.Tensor([MC+1, 1 + batch_size])
    C.assign_all(MD)
    @for_range_opt(MC+1)
    def _(i):
        C[i][0] = 0
    v = sint.Array(maxloop * MMAX0 * batch_size + 2)
    v.assign_all(0)
    W = sint.Tensor([maxloop * MMAX0 * batch_size + 2, 1 + batch_size])
    W.assign_all(MD)
    v[1] = W[1][0] = C[0][0] = ep[0]
    # print_ln('qindexes = %s, type is %s', q_indexes.get_vector()[:],type(q_indexes))
    @for_range_opt(batch_size)
    def _(i):
        q_idx = q_indexes[i]
        # print_ln('qidx = %s', q_idx)
        dis = distance_query_to_node(q_idx, ep[0].reveal())
        W[1][1+i] = C[0][1+i] = dis
        # print_ln('ep = %s, dis = %s', ep[0].reveal(), dis.reveal())
    
    ed = MemValue(regint(1))
    @for_range_opt(maxloop)
    def _(loop_t):
        print_ln('loop = %s', loop_t)
        @for_range_opt(batch_size)
        def _(i):
            C.sort(key_indices=[1+i])
            '''可能为 0 需要处理'''
            c_node_idx = C[0][0].reveal()
            '''只是为了得到c_node_idx'''
            # print_ln('batch = %s, c_node_idx = %s, dis = %s', 
                        # i, c_node_idx, C[0][i+1].reveal())
            C[0].assign_all(MD)
            C[0][0] = 0
            tmp_edge = edge[c_node_idx]
            @for_range_opt(MMAX0)
            def _(index):
                e_node_idx = tmp_edge[index]
                inserted_flag = secure_array_contains(v, e_node_idx)
                ed.iadd(1)
                v[ed] = e_node_idx
                W[ed][0] = C[MC - index][0] = inserted_flag.if_else(0, e_node_idx)
                @for_range_opt(batch_size)
                def _(j):
                    q_idx = q_indexes[j]
                    # print_ln('qidx = %s', q_idx)
                    # print_ln('inserted_flag = %s', inserted_flag.reveal())
                    dist_e = distance_query_to_nodeedge(q_idx, c_node_idx, index)
                    # print_ln('bat = %s, dise = %s', j, dist_e.reveal())
                    tp = inserted_flag.if_else(MD, dist_e)
                    W[ed][1+j] = C[MC-index][1+j] = tp
            # tmp_ef = W.get_vector_by_indices(None, 1)[:ef]
            # print_ln('W[:ef] = %s',[x.reveal() for x in tmp_ef])
    # print_ln('type of W is : %s', type(W))
    # print_ln('W is : %s', W.reveal())
    res = sint.Tensor([batch_size, ef])
    @for_range_opt(batch_size)
    def _(i):
        W.sort(key_indices=[1+i])
        # print_ln('W is : %s\n', W.reveal())
        res[i].assign(W.get_vector_by_indices(None, 0)[:ef:])
    return res
    # W.sort(key_indices=[2])
    # return W.get_vector_by_indices(None, 0)[:ef:]

def k_nn_search(q_indexes, k_param, ef_param, batch_size = 1):
    # print_ln('qindexes = %s, type is %s', q_indexes, type(q_indexes))
    batch_size = len(q_indexes)
    q_indexes = regint.Array(batch_size).assign(q_indexes)
    # print_ln('qindexes = %s, type is %s', q_indexes.get_vector()[:], type(q_indexes))
    # print_ln('batch_size = %s, ', batch_size)
    print_ln("\nq 的 K-ANN 搜索结果:")
    start_timer(timer_id=111)
    global EP, L
    ep = MemValue(EP)
    # print_ln("ep = %s", ep)
    # @for_range_opt(L, 1, -1)
    # def _(lc):
    #     # 调用查询专用版本
    #     W = search_layer_for_query(q_idx, [ep], 1, lc, 5)
    #     print_ln('lc = %s', lc)
    #     assert len(W) == 1
    #     ep.write(W[0].reveal()+1)
    ep.write(ep + L)
    '''发现这样召回率还高了'''
    # 调用查询专用版本
    # print_ln("ep = %s", ep)
    W = search_layer_for_query(q_indexes, [ep], ef_param, 0, 40, batch_size)
    print_ln('lc = %s', 0)
    # res = [ite[x.reveal()] for x in W[:k_param:]]
    print_ln('run here!')
    res = sint.Tensor([batch_size, k_param])
    @for_range_opt(batch_size)
    def _(i):
        WW = W[i][:k_param:]
        res[i].assign([ite[x.reveal()] for x in WW])
    stop_timer(timer_id=111)
    # print_ln('res = %s', res.reveal())
    return res
    # return [ite[x.reveal()] for x in W[0][:k_param:]]

# --- 初始化和主程序 ---
def init():
    print_ln("开始读取 EP, L, NodeCnt ...")
    global EP, L, NodeCnt
    EP = sint.get_input_from(2).reveal()
    L = sint.get_input_from(2).reveal()
    NodeCnt = sint.get_input_from(2).reveal()
    print_ln("----完成读取 EP, L, NodeCnt ...")

    print_ln("开始读取 原始数据库 node_brt ...")
    global node_brt
    node_brt[0] = [2*MAXX] * D
    tmp = sint.Array(D)
    @for_range_opt(1, N+1)
    def _(i):
        tmp.input_from(1)
        node_brt[i] = tmp
    print_ln("----完成读取 node_brt ...")
    # 打印前3个节点以供验证 
    # if N >= 3:
    #     for i in range(1, 4):
    #         print_ln("节点 %s: %s", i, [node_brt[i][j].reveal() for j in range(D)])

    print_ln("开始读取 复制后的数据库 node ...")
    global node
    tmp = sint.Array(D)
    @for_range_opt(NodeCnt)
    def _(i):
        tmp.input_from(1)
        node[i] = tmp
    print_ln("----完成读取 node ...")
    # 打印前3个节点以供验证 
    # if N >= 3:
    #     for i in range(1, 4):
    #         print_ln("节点 %s: %s", i, [node[i][j].reveal() for j in range(D)])

    print_ln("开始读取 edge ...")
    global edge
    tmp = sint.Array(MMAX0)
    @for_range_opt(NodeCnt)
    def _(i):
        tmp.input_from(2)
        edge[i] = tmp
    print_ln("----完成读取 edge ...")

    print_ln("开始读取 ite ...")
    global ite
    @for_range_opt(NodeCnt)
    def _(i):
        ite[i] = sint.get_input_from(2)
    print_ln("----完成读取 ite ...")

    print_ln("开始读取edge对应的d维点 nodeedge...")
    global nodeedge
    tmp = sint.Array(D)
    @for_range_opt([NodeCnt, MMAX0])
    def _(i, j):
        tmp.input_from(2)
        nodeedge[i][j] = tmp
    print_ln("----完成读取 nodeedge ...")
    # 打印前3个节点以供验证 
    # if N >= 3:
    #     for i in range(1, 4):
    #         for j in range(3):
    #             print_ln("节点 %s: %s", i, [nodeedge[i][j][k].reveal() for k in range(D)])

def distance_query_to_node_array(q_idx, node_idx):
    """计算一个查询点和一个主数据集节点之间的距离"""
    vec1 = querynode[q_idx]
    vec2 = node_brt[node_idx]
    delta = vec1 - vec2
    res = (delta * delta).sum()
    return res

def bruteforce_for_query_sort_array(q_idx):
    """暴力搜索查询点 q_idx 的 K 个最近邻，用 sort"""
    print_ln("\n暴力搜索结果:")
    start_timer(timer_id = 333)
    sQ = sint.Tensor([N, 2])
    @for_range_opt(1, N+1)
    def _(i):
        dist = distance_query_to_node_array(q_idx, i)
        sQ[i - 1] = (i, dist)
    sQ.sort(key_indices = [1])
    sQ = sQ.get_vector_by_indices(None, 0)[:K:]
    stop_timer(timer_id = 333)
    print_ln('dis = %s', distance_query_to_node_array(q_idx, 7822).reveal())
    # print_ln('%s', distance_query_to_node_array(q_idx, 2693).reveal())
    return sQ

def bruteforce_for_query_sort_array_updated(q_idx):
    print_ln("\n优化的暴力搜索结果:")
    start_timer(666)
    s = sint.Array(N+1)
    s.assign_all(0)
    tmp = sint.Array(N+1)
    @for_range_opt(D)
    def _(i):
        tmp.assign_all(querynode[q_idx][i])
        v = node_brt.get_vector_by_indices(None, i) - tmp
        v = v * v
        s.assign(s + v)
    s = s.to_column_matrix()
    x = sint.Tensor([N+1,1])
    x.assign(regint.inc(size = N+1))
    sQ = x.concat_columns(s)
    # print_ln('%s', type(sQ))
    sQ.sort(key_indices=[1])
    sQ = sQ.get_vector_by_indices(None, 0)[:K:]
    stop_timer(666)
    return sQ

def bruteforce_for_query_sort_array_batch(q_indexes, batch_size = 1):
    batch_size = len(q_indexes)
    q_indexes = regint.Array(batch_size).assign(q_indexes)
    print_ln("\n优化的暴力搜索结果:")
    start_timer(666)
    res = sint.Tensor([batch_size, K])
    @for_range_opt(batch_size)
    def _(i):
        q_idx = q_indexes[i]
        s = sint.Array(N+1)
        s.assign_all(0)
        tmp = sint.Array(N+1)
        @for_range_opt(D)
        def _(i):
            tmp.assign_all(querynode[q_idx][i])
            v = node_brt.get_vector_by_indices(None, i) - tmp
            v = v * v
            s.assign(s + v)
        s = s.to_column_matrix()
        x = sint.Tensor([N+1,1])
        x.assign(regint.inc(size = N+1))
        sQ = x.concat_columns(s)
        sQ.sort(key_indices=[1])
        res[i].assign(sQ.get_vector_by_indices(None, 0)[:K:])
    stop_timer(666)
    # print_ln('res = %s', res.reveal())
    return res


def initquerynode(num, dim = D):
    print_ln("\n开始读入查询数据...")
    global querynode
    querynode = sint.Tensor([num + 1 , dim])
    tmp = sint.Array(D)
    @for_range_opt(1, num + 1)
    def _(i):
        tmp.input_from(0)
        querynode[i] = tmp
        # print_ln('%s', querynode[i].reveal())
    print_ln("----完成读入查询数据")

'''-------------------主程序-----------------------------'''
def main():
    init()
    print_ln('-'*50+'RESULT'+'-'*50)
    print_ln("*"*50)
    print_ln("N (数据点数): %s", N)
    print_ln("D (维度): %s", D)
    print_ln("M (最大连接数): %s", M)
    print_ln("mL (层级因子): %s", ML)
    print_ln("K (近邻数): %s", K)
    print_ln("efConstruction: %s", EF_CONSTRUCTION)
    print_ln("EP = %s", EP)
    print_ln("L = %s", L)
    print_ln("NodeCnt  = %s", NodeCnt)
    print_ln("*"*50)

    print_ln("\nHNSW 图读取完成")

    initquerynode(nq)
    ave_recall = MemValue(0)
    batch = 1

    @for_range_opt(1, nq//batch * batch + 1, batch)
    def _(q_idx):
        q_indexes = regint.inc(batch, q_idx)
        # print_ln('q_indexes = %s', q_indexes.get_vector()[:])
        print_ln("\n--------------------------------")
        print_ln('当前查询点 (索引 %s - %s) ', q_idx, q_idx + batch - 1)    
        # 调用查询专用函数 k_nn_search，并传递查询索引
        knn_res = k_nn_search(q_indexes, K, EF_CONSTRUCTION)
        knn_clr = knn_res.reveal()
        print_ln("序号: %s", knn_clr)

        # for res_idx in knn_res:
        #     dist = distance_query_to_node(q_idx, res_idx)
        #     print_ln("%s || %s", res_idx, dist)

        # 调用查询专用的暴力搜索函数    
        brt_res = bruteforce_for_query_sort_array_batch(q_indexes)
        brt_clr = brt_res.reveal()
        print_ln('序号: %s', brt_clr)

        ccnt = MemValue(cint(0))
        @for_range_opt([batch,K,K])
        def _(bt, i, j):
            ccnt.write(ccnt + (knn_clr[bt][i]==brt_clr[bt][j]).if_else(1, 0))
        recall = ccnt / (batch * K)
        ave_recall.iadd(ccnt)
        print_ln("召回率: %s", recall)
        print_ln("-------------------------------------")
    
    print_ln("平均召回率: %s",  ave_recall / (nq * K))
    print_ln('-'*50+'END'+'-'*50)
    print_ln('**************************************')
    print_ln('***** timer 111 是 HNSW 的结果    *****')
    print_ln('***** timer 333 是 暴搜  的结果    *****')
    print_ln('***** timer 666 是 优化暴搜 的结果  *****')
    print_ln('**************************************')
    
#------ 主函数 ------
main()