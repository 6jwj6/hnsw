from Compiler.library import *
from Compiler.types import *
from Compiler.oram import *
from Compiler.program import Program
from Programs.Source.HeapQ import *
N_VALUE_BITS = 6
HEAP_MAX_SIZE_AND_VALUE_RANGE = 2**N_VALUE_BITS 

NEG_INF_PRIO = sint(-(2**(N_VALUE_BITS - 1)))

print_ln("Initializing HeapQ with max_size/value_range = %s (%s bits for x)...", HEAP_MAX_SIZE_AND_VALUE_RANGE, N_VALUE_BITS)

Q = HeapQ(max_size=HEAP_MAX_SIZE_AND_VALUE_RANGE, # Defines value range [0, max_size-1] and heap capacity
          oram_type=OptimalORAM,
          int_type=sint,
          entry_size=(N_VALUE_BITS, N_VALUE_BITS) # (priority_bits, value_bits) for HeapEntry
)
print_ln('-'*50+'RESULT'+'-'*50)   


for i in range(20):
    ins = sint.get_input_from(0)
    x = sint.get_input_from(0)
    Q.update(i, x, ins)
    entry = Q.pop(sint(1)-ins)

    @if_e(ins.reveal())
    def _():
        print_ln('%s insert...', x.reveal())
    @else_
    def _():
        print_ln('%s poped...', entry[0].reveal())