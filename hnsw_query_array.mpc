from Compiler.library import *
from Compiler.types import *
from Compiler.oram import *
# from Programs.Source.HeapQ import MinHeapQ,MaxHeapQ
# import time
from Compiler.mpc_math import *
# --- 全局常量和变量 ---
MINX = -100
MAXX = 100

D = 4  # 向量维度
M = 6  # 每个节点的最大连接数 (除第0层外)
MMAX0 = 2 * M  # 第0层的最大连接数
MMAX = M
N = 200000# 数据点数量
EF_CONSTRUCTION = 10  # 构建索引时的搜索范围大小
K = 2 # K-NN搜索中的K值

Maxloop = EF_CONSTRUCTION*EF_CONSTRUCTION
# 数据和图结构
# node =  OptimalORAM(size = N + 1, value_length = D) # 邻接表, edge[0] 作为占位符
node = sint.Tensor([N+1, D])
node_brt = sint.Tensor([N + 1, D])
querynode = None
MaxNodeCnt = (int)(N*M/(M-1) + 6*math.sqrt(N*M)/(M-1)) #总点数期望值
# edge = OptimalORAM(size = MaxNodeCnt, value_length = MMAX0)
# ite = OptimalORAM(size = MaxNodeCnt)   # 索引到节点ID的映射, ite[0] 作为占位符
edge = sint.Tensor([MaxNodeCnt, MMAX0])
ite = sint.Array(MaxNodeCnt)
# HNSW 算法状态
L = None  # 当前最高层数
EP = None # 入口点 (entry point) 的索引
NodeCnt = cint(0)
ML = 1 / math.log(M)

def distance_query_to_node(q_idx, node_idx):
    """计算一个查询点和一个主数据集节点之间的距离"""
    vec1 = querynode[q_idx]
    vec2 = node[node_idx]
    # res = sint(0)
    # for i in range(D):
    #     res = res + (vec1[i]-vec2[i]) * (vec1[i]-vec2[i])
    delta = vec1 - vec2
    res = (delta * delta).sum()
    return res

def nxt(W):
    return [i + 1 for i in W]

def secure_array_contains(target_array, element_to_find):
    """
    安全、高效地判断一个 sint 元素是否存在于 sint.Array 中。
    :param target_array: sint.Array, 在其中进行搜索的数组
    :param element_to_find: sint, 要查找的元素
    :return: sbool (sint), 如果存在则为1，否则为0
    """
    broadcasted_element = sint.Array(size = target_array.length)
    broadcasted_element.assign_all(element_to_find)
    # 向量化比较
    match_vector = (target_array == broadcasted_element)
    num_matches = match_vector.sum()
    result = num_matches > 0
    return result

def search_layer_for_query(q_idx, ep, ef, lc):
    MD = 100000000
    MC = ef+ MMAX0
    MW = K + MMAX0
    C = sint.Tensor([MC+1, 2])
    C.assign_all(MD)
    C[0] = (distance_query_to_node(q_idx, ite[ep[0]].reveal()), ep[0])
    W = sint.Tensor([MW+1, 2])
    W.assign_all(MD)
    W[0] = (distance_query_to_node(q_idx, ite[ep[0]].reveal()), ep[0])

    maxloop = 45
    v = sint.Array(maxloop * MMAX0 + 2)
    v.assign_all(0)
    v[1] = q_idx
    ed = MemValue(regint(1))
    @for_range_opt(maxloop)
    def _(loop_t):
        print_ln('--loop_t = %s', loop_t)
        dist_c, c_node_idx = C[0]
        c_node_idx = c_node_idx.reveal()
        print_ln('c_node_idx = %s, dis = %s', 
                    c_node_idx, dist_c.reveal())
        C[0] = (MD, 0)

        tmp_edge = sint.Array(MMAX0)
        tmp_edge.assign_vector(edge[c_node_idx])
        @for_range_opt(MMAX0)
        def _(index):
            e_node_idx = tmp_edge[index].reveal()
            print_ln('index = %s, e_node_idx = %s', index, e_node_idx)
            inserted_flag = secure_array_contains(v, e_node_idx)
            # inserted_flag = sint(0)
            print_ln('inserted_flag = %s', inserted_flag.reveal())
            dist_e = distance_query_to_node(q_idx, ite[e_node_idx].reveal())
            ed.iadd(1)
            print_ln('ed = %s', ed)
            v[ed] = e_node_idx
            tp_0 = inserted_flag.if_else(MD, dist_e)
            tp_1 = inserted_flag.if_else(0, e_node_idx)
            tp = (tp_0, tp_1)
            print_ln('tp = (%s, %s)', tp_0.reveal(), tp_1.reveal())
            C[MC-index] = tp
            W[MW-index] = tp
        C.sort()
        W.sort()
        # tmp_ef = W.get_vector_by_indices(None, 1)[:ef]
        # print_ln('W[:ef] = %s',[x.reveal() for x in tmp_ef])
    # return [item[1] for item in sorted(W, key=lambda x: x[0], reverse=True)]
    return W.get_vector_by_indices(None, 1)[:ef:]

def k_nn_search(q_idx, k_param, ef_param):
    global EP, L
    W = []
    ep = MemValue(EP)
    # for lc in range(L, 0, -1):
    print_ln("ep = %s", ep)
    # @for_range_opt(L, 0, -1)
    # def _(lc):
        # 调用查询专用版本
        # W = search_layer_for_query(q_idx, ep, 1, lc)
        # assert len(W) == 1
        # ep = nxt(W)
        # ep.write(ep + 1)
        # print_ln("ep = %s", ep)
        # print_ln("lc = %s", lc)
    ep.write(ep + L)
    # 调用查询专用版本
    W = search_layer_for_query(q_idx, [ep], ef_param, 0)
    # W = [ep]
    print_ln("ep = %s", ep)
    return [ite[x.reveal()] for x in W[:k_param:]]

# --- 初始化和主程序 ---
def init():
    print_ln("开始读取 node ...")
    global node, node_brt
    node[0] = [2*MAXX] * D
    node_brt[0] = [2*MAXX] * D
    tmp = sint.Array(D)
    # for i in range(1, N + 1):
    @for_range_opt(1,N+1)
    def _(i):
        tmp.input_from(1)
        node[i] = tmp
        node_brt[i] = tmp
    print_ln("----完成读取 node ...")
    # 打印前3个节点以供验证 (这部分代码保持不变)
    if N >= 3:
        for i in range(1, 4):
            print_ln("节点 %s: %s", i, [node[i][j].reveal() for j in range(D)])

    print_ln("开始读取 EP, L, NodeCnt ...")
    global EP, L, NodeCnt
    EP = sint.get_input_from(2).reveal()
    L = sint.get_input_from(2).reveal()
    NodeCnt = sint.get_input_from(2).reveal()
    print_ln("----完成读取 EP, L, NodeCnt ...")

    print_ln("开始读取 edge ...")
    global edge
    tmp = sint.Array(MMAX0)
    @for_range_opt(NodeCnt)
    def _(i):
        tmp.input_from(2)
        edge[i] = tmp
    print_ln("----完成读取 edge ...")

    print_ln("开始读取 ite ...")
    global ite
    @for_range_opt(NodeCnt)
    def _(i):
        ite[i] = sint.get_input_from(2)
    print_ln("----完成读取 ite ...")
    
@function_block
def bruteforce_for_query_sort_oram(q_idx):
    """暴力搜索查询点 q_idx 的 K 个最近邻，用 sort"""
    print_ln("\n暴力搜索结果:")
    start_timer(timer_id = 222)
    # start_time = time.time()
    sQ = sint.Tensor([N, 2])
    # for i in range(1, N+1):
    @for_range_opt(1, N+1)
    def _(i):
        dist = distance_query_to_node(q_idx, i)
        sQ[i - 1] = (i, dist)
    sQ.sort(key_indices = [1])
    sQ = sQ.get_vector_by_indices(None, 0)[:K:]
    # end_time = time.time()
    stop_timer(timer_id = 222)
    # duration_ms = (end_time - start_time) * 1000
    print_ln('序号: %s', [_.reveal() for _ in sQ])
    # print_ln("查询耗时: %s ms", duration_ms)
    return sQ

def distance_query_to_node_array(q_idx, node_idx):
    """计算一个查询点和一个主数据集节点之间的距离"""
    vec1 = querynode[q_idx]
    vec2 = node_brt[node_idx]
    # res = sint(0)
    # for i in range(D):
    #     res = res + (vec1[i]-vec2[i]) * (vec1[i]-vec2[i])
    delta = vec1 - vec2
    res = (delta * delta).sum()
    return res

@function_block
def bruteforce_for_query_sort_array(q_idx):
    """暴力搜索查询点 q_idx 的 K 个最近邻，用 sort"""
    print_ln("\n暴力搜索结果:")
    start_timer(timer_id = 333)
    # start_time = time.time()
    sQ = sint.Tensor([N, 2])
    # for i in range(1, N+1):
    @for_range_opt(1, N+1)
    def _(i):
        dist = distance_query_to_node_array(q_idx, i)
        sQ[i - 1] = (i, dist)
    sQ.sort(key_indices = [1])
    sQ = sQ.get_vector_by_indices(None, 0)[:K:]
    # end_time = time.time()
    stop_timer(timer_id = 333)
    # duration_ms = (end_time - start_time) * 1000
    print_ln('序号: %s', [_.reveal() for _ in sQ])
    # print_ln("查询耗时: %s ms", duration_ms)
    return sQ

def genquerynode(num, dim=D):
    print_ln("\n开始生成查询数据...")
    global querynode
    querynode = sint.Tensor([num+1 , dim])
    for i in range(1,num+1):
        querynode[i] = [random.randint(MINX, MAXX) for _ in range(dim)]
        print_ln('%s', querynode[i].reveal())
    print_ln("完成写入查询数据")

'''-------------------主程序-----------------------------'''
def main():
    init()
    print_ln('-'*50+'RESULT'+'-'*50)
    print_ln("*"*50)
    print_ln("N (数据点数): %s", N)
    print_ln("D (维度): %s", D)
    print_ln("M (最大连接数): %s", M)
    print_ln("mL (层级因子): %s", ML)
    print_ln("K (近邻数): %s", K)
    print_ln("efConstruction: %s", EF_CONSTRUCTION)
    print_ln("EP = %s", EP)
    print_ln("L = %s", L)
    print_ln("NodeCnt  = %s", NodeCnt)
    print_ln("*"*50)

    print_ln("\nHNSW 图读取完成")
 
    nq = 1
    genquerynode(nq)

    ave_recall = 0.0
    for q_idx in range(1, nq+1):
        print_ln("\n--------------------------------")
        print_ln("当前查询点 (索引 %s) 为 (%s)", q_idx,
                                    querynode[q_idx].reveal())
        # brt_res = bruteforce_for_query_sort(q_idx)
        # brt_clr = [x.reveal() for x in brt_res]
        print_ln("\nq 的 K-ANN 搜索结果:")
        # # 调用查询专用函数 k_nn_search，并传递查询索引
        start_timer(timer_id=111)
        knn_res = k_nn_search(q_idx, K, EF_CONSTRUCTION)
        stop_timer(timer_id=111)
        knn_clr = [x.reveal() for x in knn_res]
        knn_arr = cint.Array(K)
        knn_arr.assign_vector(knn_clr)
        
        print_ln("序号: %s", knn_clr)
        # for res_idx in knn_res:
        #     dist = distance_query_to_node(q_idx, res_idx)
        #     print_ln("%s || %s", res_idx, dist)
        # print_ln("查询耗时: %s ms", duration_query_ms)

        # 调用查询专用的暴力搜索函数    
        # bruteforce_for_query_sort_oram(q_idx)
        brt_res = bruteforce_for_query_sort_array(q_idx)
        brt_clr = [x.reveal() for x in brt_res]
        brt_arr = cint.Array(K)
        brt_arr.assign_vector(brt_clr)
        # brt_set = set(brt_clr)
        # ccnt = sum(1 for res_idx in knn_clr if res_idx in brt_set)
        ccnt = MemValue(cint(0))
        @for_range_opt([K,K])
        def _(i,j):
            ccnt.write(ccnt + (knn_arr[i]==brt_arr[j]).if_else(1, 0))
        recall = ccnt / K
        ave_recall += recall
        print_ln("召回率: %s", recall)
        print_ln("-------------------------------------")
    # # --- 修改结束 (6/6) ---
        
    print_ln("平均召回率: %s", ave_recall / nq)
    print_ln('-'*50+'END'+'-'*50)


main()